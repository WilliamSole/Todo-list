{"version":3,"sources":["hooks/useLocalStorageState.js","hooks/useTodoState.js","hooks/useInputState.js","EditTodoForm.js","hooks/useToggleState.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorageState","key","defaultVal","_useState","useState","val","JSON","parse","window","localStorage","getItem","String","e","_useState2","Object","slicedToArray","state","setState","useEffect","setItem","stringify","useTodoState","initialTodos","_useLocalStorageState","_useLocalStorageState2","todos","setTodos","addTodo","newTodoText","concat","toConsumableArray","id","uuid","task","completed","removeTodo","todoId","updatedTodos","filter","todo","toggleTodo","map","objectSpread","editTodo","newTask","onDragEnd","result","destination","source","draggableId","droppableId","index","newTodos","reorder","list","startIndex","endIndex","Array","from","_result$splice","splice","removed","useInputState","initialVal","value","setValue","target","EditTodoForm","_ref","toggleEditForm","_useInputState","_useInputState2","handleChange","reset","react_default","a","createElement","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","ListItemSecondaryAction","IconButton","aria-label","onClick","Cancel_default","type","Check_default","useToggle","arguments","length","undefined","Todo","_useToggleState","useToggleState","_useToggleState2","isEditing","toggle","react_beautiful_dnd_esm","provided","ListItem","assign","height","draggableProps","dragHandleProps","ref","innerRef","src_EditTodoForm","Fragment","Checkbox","tabIndex","checked","ListItemText","textDecoration","Edit_default","Delete_default","TodoList","Paper","droppableProps","List","i","src_Todo","Divider","placeholder","TodoForm","padding","label","TodoApp","defaultTodos","_useTodoState","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","src_TodoForm","src_TodoList","App","className","src_TodoApp","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe41853d.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nfunction useLocalStorageState(key, defaultVal){\r\n    const [state, setState] = useState(() => {\r\n        let val;\r\n        try{\r\n            val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal))\r\n        }\r\n        catch(e) {\r\n            val = defaultVal;\r\n        }\r\n        return val;\r\n    });\r\n\r\n    useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(state))\r\n    }, [state]);\r\n    return [state, setState];\r\n}\r\n\r\nexport default useLocalStorageState;","import useLocalStorageState from './useLocalStorageState';\r\nimport uuid from 'uuid/v4';\r\n\r\nexport default initialTodos => {\r\n    const [todos, setTodos] = useLocalStorageState('todos', initialTodos);\r\n\r\n    return{\r\n        todos,\r\n        addTodo: newTodoText => {\r\n            setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }])\r\n        },\r\n        removeTodo: todoId => {\r\n            const updatedTodos = todos.filter(todo => todo.id !== todoId);\r\n            setTodos(updatedTodos);\r\n        },\r\n        toggleTodo: todoId => {\r\n            const updatedTodos = todos.map(todo => todo.id === todoId ? { ...todo, completed: !todo.completed } : todo)\r\n            setTodos(updatedTodos);\r\n        },\r\n        editTodo: (todoId, newTask) => {\r\n            const updatedTodos = todos.map(todo => todo.id === todoId ? { ...todo, task: newTask } : todo)\r\n            setTodos(updatedTodos);\r\n        },\r\n        onDragEnd: result => {\r\n            const { destination, source, draggableId } = result;\r\n\r\n            if(!destination) {\r\n                return;\r\n            }\r\n\r\n            if(destination.droppableId === source.droppableId && destination.index === source.index) {\r\n                return;\r\n            }\r\n\r\n            const newTodos = reorder(\r\n                todos,\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            setTodos(newTodos);\r\n        }\r\n    }\r\n};\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};","import { useState } from 'react';\r\n\r\nexport default initialVal => {\r\n    const [value, setValue] = useState(initialVal);\r\n    const handleChange = e => {\r\n        setValue(e.target.value);\r\n    }\r\n    const reset = () => {\r\n        setValue('');\r\n    }\r\n    return [value, handleChange, reset];\r\n}","import React from 'react';\r\nimport useInputState from './hooks/useInputState';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n\r\nfunction EditTodoForm({ id, task, editTodo, toggleEditForm }){\r\n    const [value, handleChange, reset] = useInputState(task);\r\n    return(\r\n        <form \r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                editTodo(id, value);\r\n                reset();\r\n                toggleEditForm();\r\n            }}\r\n            style={{\r\n                marginLeft: '1rem',\r\n                width: '70%'\r\n            }}\r\n        >\r\n                <TextField \r\n                    margin='normal' \r\n                    value={value} \r\n                    onChange={handleChange} \r\n                    fullWidth \r\n                    autoFocus\r\n                />\r\n            <ListItemSecondaryAction>\r\n                <IconButton aria-label='Cancel' onClick={toggleEditForm}>\r\n                    <CancelIcon />\r\n                </IconButton>\r\n                <IconButton aria-label='Delete' type='submit'>\r\n                    <CheckIcon />\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditTodoForm;","import { useState } from 'react';\r\n\r\nfunction useToggle(initialVal = false) {\r\n    const [state, setState] = useState(initialVal);\r\n    const toggle = () => {\r\n        setState(!state);\r\n    }\r\n    return [state, toggle];\r\n}\r\n\r\nexport default useToggle;","import React from 'react';\r\nimport EditTodoForm from './EditTodoForm';\r\nimport useToggleState from './hooks/useToggleState';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nfunction Todo({ id, index, task, completed, removeTodo, toggleTodo, editTodo }) {\r\n    const [isEditing, toggle] = useToggleState();\r\n\r\n    return (\r\n        <Draggable draggableId={id} index={index}>\r\n            {(provided) =>\r\n                <ListItem\r\n                    style={{ height: '54px' }}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    {isEditing ? (<EditTodoForm id={id} task={task} editTodo={editTodo} toggleEditForm={toggle} />) : (\r\n                        <>\r\n                            <Checkbox tabIndex={-1} checked={completed} onClick={() => toggleTodo(id)} />\r\n                            <ListItemText style={{ textDecoration: completed ? 'line-through' : 'none' }}>{task}</ListItemText>\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton aria-label='Edit' onClick={toggle}>\r\n                                    <EditIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label='Delete' onClick={() => removeTodo(id)}>\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </>\r\n                    )}\r\n                </ListItem>\r\n            }\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Todo from './Todo';\r\n\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport uuid from 'uuid/v4';\r\n\r\nfunction TodoList({ todos, removeTodo, toggleTodo, editTodo }) {\r\n    return (\r\n        <Droppable droppableId={uuid()}>\r\n            {provided => (\r\n                <Paper ref={provided.innerRef} {...provided.droppableProps}>\r\n                    <List>\r\n                        {\r\n                            todos.map((todo, i) => (\r\n                                <>\r\n                                    <Todo\r\n                                        {...todo}\r\n                                        index={i}\r\n                                        task={todo.task}\r\n                                        removeTodo={removeTodo}\r\n                                        toggleTodo={toggleTodo}\r\n                                        editTodo={editTodo}\r\n                                    />\r\n                                    {i < todos.length - 1 && <Divider />}\r\n                                </>\r\n                            ))\r\n                        }\r\n                        {provided.placeholder}\r\n                    </List>\r\n                </Paper>\r\n            )}\r\n        </Droppable>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport useInputState from './hooks/useInputState';\r\n\r\nfunction TodoForm({addTodo}) {\r\n    const [value, handleChange, reset] = useInputState('');\r\n\r\n    return(\r\n        <Paper style={{ margin: '1rem 0', padding: '0 1rem' }}>\r\n            <form onSubmit={e => {\r\n                e.preventDefault()\r\n                addTodo(value);\r\n                reset();\r\n            }}>\r\n                <TextField value={value} onChange={handleChange} margin='normal' label='Add New Todo' fullWidth />\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoForm;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport useTodoState from './hooks/useTodoState';\r\nimport TodoList from './TodoList';\r\nimport TodoForm from './TodoForm';\r\n\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\n\r\nimport uuid from 'uuid/v4';\r\n\r\nfunction TodoApp() {\r\n    const defaultTodos = [\r\n        { id: uuid(), task: 'Clean lion den', completed: false },\r\n        { id: uuid(), task: 'Repair Ford Mustang GT', completed: true },\r\n        { id: uuid(), task: 'Establish connection with alien life', completed: false }\r\n    ];\r\n    const initialTodos = defaultTodos;\r\n    const { todos, addTodo, removeTodo, toggleTodo, editTodo, onDragEnd } = useTodoState(initialTodos);\r\n\r\n    return (\r\n        <Paper\r\n            style={{\r\n                padding: 0,\r\n                margin: 0,\r\n                height: '100vh',\r\n                backgroundColor: '#fafafa'\r\n            }}\r\n            elevation={0}\r\n        >\r\n            <AppBar color='primary' position='static' style={{ height: '64px' }}>\r\n                <Toolbar>\r\n                    <Typography color='inherit'>TODOS</Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container justify='center' style={{ marginTop: '1rem' }}>\r\n                <Grid item xs={11} md={8} lg={6}>\r\n                    <TodoForm addTodo={addTodo} />\r\n                    <DragDropContext\r\n                        onDragEnd={onDragEnd}\r\n                    >\r\n                        <TodoList todos={todos} removeTodo={removeTodo} toggleTodo={toggleTodo} editTodo={editTodo} />\r\n                    </DragDropContext>\r\n                </Grid>\r\n                </Grid>\r\n        </Paper>\r\n            )\r\n        }\r\n        \r\nexport default TodoApp;","import React from 'react';\nimport TodoApp from './TodoApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}